Assignment 4: Image Processor



To represent an image in our processor, we made our own data type for an 
Image, which basically holds an ArrayList<ArrayList<Pixel>>. Has methods for getting a pixel, setting a pixel, cloning  an image, and retrieving the dimensions of the image.  

Our Model implements an ImageProcessorModel which extends an ImageProcessorModelState. The ImageProcessorModelState contains methods that allow the user to make observations about the code, while the ImageProcessorModel interface contains methods that allow the user to perform operations on the images. Most of the functionality of the model is stored in command function objects.

Since the view element of this assignment was very minimal, our View interface only has a few methods that print to a given spendable object. 

Our controller interface followed a basic controller design, but our implementation again deviated a bit from the traditional design, as a lot of  the functionality for the controller was stored in CommandFactory function objects.

We had an ImageUtil class to handle random miscellaneous methods that were used 
across multiple classes such as ensureNotNull(Object o).

For testing we used Mock objects and abstracted our tests for the command 
factories as they were very similar across all of them. The bulk of our testing 
was for the commands themselves and the command factories, since they stored a 
large part of the functionality of the model and controller, respectively.


CHANGES:

BufferWrapper: since we were handling other image types, we needed to create a wrapped class for a Buffered image so we could process them the same way we processed images in the last assignment

Commands: our LoadCommand changed to a LoadPPMCommand and our SaveCommand changed to a SavePPMCommand. We added a ReadImageIOCommand, a SaveImageIOCommand, a ColorTransformation command, a SepiaCommand that extends the previous command,  a FilterCommand, and a BlurCommand and Sharpen Command which both extend the FilterCommand

Factories: we added appropriate factories for all the commands above.

Tests: we added tests for all the new commands and factories above.



In order to run Script.txt, simply type “-file <filepath of script>" into the command line and run the program.

The "koala", "sixbit" and “25bit” directories in the "res" folder are image used for testing. The
"blerner-examples" folder contains example images generated by running our program.

IMAGE CITATIONS:

Koala: assignment 4 canvas page; starter code; converted and cropped to a smaller size
using paint.net so that we could actually submit the project
sixbit: created ourselves using paint.net for use in this project
25bit: created ourselves using paint.net for use in this project
blerner: https://www.ccs.neu.edu/home/blerner/personal.html, used with permission from
Professor Lerner himself
